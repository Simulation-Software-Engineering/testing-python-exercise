"""
Tests for functions in class SolveDiffusion2D
"""

from pytest import approx
from numpy import array
from numpy.testing import assert_allclose

from diffusion2d import SolveDiffusion2D


def test_initialize_domain():
    """
    Check function SolveDiffusion2D.initialize_domain
    """
    solver = SolveDiffusion2D()

    expected_nx = 6
    expected_ny = 2

    # nx = int(w / dx)
    # ny = int(h / dy)

    solver.initialize_domain(w=9.1, h=6.2, dx=1.4, dy=2.6)

    assert solver.nx == expected_nx, 'initialize_domain produced wrong nx value'
    assert solver.ny == expected_ny, 'initialize_domain produced wrong ny value'


def test_initialize_physical_parameters():
    """
    Checks function SolveDiffusion2D.initialize_domain
    """
    solver = SolveDiffusion2D()

    solver.w = 9.1
    solver.h = 6.2
    solver.dx = 1.3
    solver.dy = 2.6
    solver.nx = 6
    solver.ny = 2

    # dx2, dy2 = self.dx * self.dx, self.dy * self.dy
    # dt = dx2 * dy2 / (2 * self.D * (dx2 + dy2))

    expected_dt = approx(0.25037037037037035)

    solver.initialize_physical_parameters(d=2.7, T_cold=321.3, T_hot=657.4)

    assert solver.dt == expected_dt


def test_set_initial_condition():
    """
    Checks function SolveDiffusion2D.get_initial_function
    """
    solver = SolveDiffusion2D()

    solver.w = 9.8
    solver.h = 10.2
    solver.dx = 0.3
    solver.dy = 0.4
    solver.nx = 32
    solver.ny = 25
    solver.D = 6.7
    solver.T_cold = 321.3
    solver.T_hot = 657.4
    solver.dt = 0.004298507462686568

    expected_u = array([
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 657.4, 657.4, 657.4, 657.4, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3],
        [321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3, 321.3]])

    actual_u = solver.set_initial_condition()
    assert_allclose(actual_u, expected_u)
